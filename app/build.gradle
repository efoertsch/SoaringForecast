apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 30
    //buildToolsVersion "25.0.2" - Android Gradle Plugin now includes default version of build tools
    defaultConfig {
        applicationId "org.soaringforecast.rasp"
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 19
        versionName "1.6.4"
        //https://artemzin.com/blog/how-to-mock-dependencies-in-unit-integration-and-functional-tests-dagger-robolectric-instrumentation/
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //testInstrumentationRunner "org.soaringforecast.rasp.app.OverrideApplicationTestRunner"

        // to use any vector drawables
        vectorDrawables.useSupportLibrary = true

        // to export room db schema - good for db validation and migration validation/checking
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }

        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
    }

    // To resolve error - DuplicateFileException: Duplicate files copied in APK META-INF/rxjava.properties
    // caused by using RxJava v1 w/ Retrofit v2
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }


}

// to pick up mock xml responses
//http://stackoverflow.com/questions/37221590/how-do-i-access-a-text-file-for-junit-test-in-android
// to share test classes/files
//http://blog.danlew.net/2015/11/02/sharing-code-between-unit-tests-and-instrumentation-tests-on-android/
android.sourceSets {
    String sharedTestJava = 'src/sharedTest/java'
    String sharedTestResources = 'src/sharedTest/resources'
    test {
        java.srcDirs += sharedTestJava
        resources.srcDirs += sharedTestResources
    }
    androidTest {
        java.srcDirs += sharedTestJava
        resources.srcDirs += sharedTestResources
    }
}


dependencies {
    final MATERIAL_VERSION = '1.3.0-alpha02'

    final ANDROIDX_APPCOMPAT_VERSION = '1.3.0-rc01'
    final ANDROIDX_RECYCLERVIEW_VERSION = '1.1.0'
    final ANDROIDX_CARDVIEW_VERSION = '1.0.0'
    final ANDROIDX_PREFERENCE_VERSION = '1.1.1'
    final ANDROIDX_CONSTRAINT_LAYOUT_VERSION = '1.1.3'

    final ANDROIDX_LEGACY_SUPPORT_VERSION = '1.0.0'
    final ANDROIDX_ANNOTATION_VERSION = '1.1.0'

    final GOOGLE_MAPS_VERSION = '17.0.0'
    final ANDROID_MAPS_UTILS = '0.5+'
    final RX_ANDROID = '2.0.2'
    final RX_JAVA = '2.1.12'
    final RETROFIT = '2.7.0'
    final SIMPLE_XML = '2.1.0'
    final GSON = '2.8.2'
    final GSON_CONVERTER = '2.3.0'
    final GLIDE = '4.9.0'
    final OKHTTP = '3.8.0'
    final DAGGER = '2.28'
    final TIMBER = '4.7.0'
    final ESPRESSO = '2.2.2'
    final HAMCREST = '1.3'
    final RUNNER = '1.0.1'
    final UIAUTOMATOR = '2.1.3'
    final JUNIT = '4.12'
    final MOCKITO = '2.24.5'
    final EVENT_BUS = '3.1.1'
    final MEMORY_CACHE = '1.0.2.Final'
    final DISK_CACHE = '2.0.2'
    final ROOM_VERSION = '2.3.0'
    final ARCH_LIFE_CYCLE_VERSION = '2.2.0'
    final ARCH_CORE_TESTING = '1.1.1'
    final WORK_VERSION = "2.4.0"
    final EASYPERMISSIONS = "2.0.1"
    final GOOGLE_PLACES = "2.3.0"
    final MULTIDEX = '2.0.1'

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Android compat/support libraries

    implementation "com.google.android.material:material:$MATERIAL_VERSION"

    implementation "androidx.appcompat:appcompat:$ANDROIDX_APPCOMPAT_VERSION"
    implementation "androidx.recyclerview:recyclerview:$ANDROIDX_RECYCLERVIEW_VERSION"
    implementation "androidx.cardview:cardview:$ANDROIDX_CARDVIEW_VERSION"
    implementation "androidx.legacy:legacy-support-v4:$ANDROIDX_LEGACY_SUPPORT_VERSION"
    implementation "androidx.preference:preference:$ANDROIDX_PREFERENCE_VERSION"
    implementation "androidx.constraintlayout:constraintlayout:$ANDROIDX_CONSTRAINT_LAYOUT_VERSION"
    implementation "com.google.android.gms:play-services-maps:$GOOGLE_MAPS_VERSION"

    implementation "androidx.multidex:multidex:$MULTIDEX"

    // Bus
    implementation "org.greenrobot:eventbus:$EVENT_BUS"

    //Retrofit
    implementation "com.squareup.retrofit2:retrofit:$RETROFIT"
    implementation("com.squareup.retrofit2:adapter-rxjava2:$RETROFIT") {
        exclude group: 'io.reactivex.java2', module: 'rxjava'
    }

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:$RX_JAVA"
    implementation "io.reactivex.rxjava2:rxandroid:$RX_ANDROID"

    // SimpleXML
    implementation("com.squareup.retrofit2:converter-simplexml:$SIMPLE_XML") {
        exclude module: 'stax-api'
        exclude module: 'stax'
        exclude module: 'xpp3'
    }

    // For cgi call to get specific lat/long forecast
    implementation 'com.squareup.retrofit2:converter-scalars:2.5.0'


    // GSON (JSON)
    implementation "com.google.code.gson:gson:$GSON"
    implementation "com.squareup.retrofit2:converter-gson:$GSON_CONVERTER"

    //okhttp
    implementation "com.squareup.okhttp3:okhttp:$OKHTTP"

    //Dagger2
    implementation "com.google.dagger:dagger:$DAGGER"
    //implementation "com.google.dagger:dagger-android:$DAGGER"
    implementation "com.google.dagger:dagger-android-support:$DAGGER"

    annotationProcessor "com.google.dagger:dagger-android-processor:$DAGGER"
    kapt "com.google.dagger:dagger-android-processor:$DAGGER"
    //compileOnly "com.google.dagger:dagger:$DAGGER"
    kapt "com.google.dagger:dagger-compiler:$DAGGER"

    // Diskcache
    implementation "com.jakewharton:disklrucache:$DISK_CACHE"

    // Memory cache
    implementation "org.cache2k:cache2k-api:$MEMORY_CACHE"
    implementation "org.cache2k:cache2k-core:$MEMORY_CACHE"

    //Room
    implementation "androidx.room:room-runtime:$ROOM_VERSION"
    implementation "androidx.room:room-rxjava2:$ROOM_VERSION"
    kapt "androidx.room:room-compiler:$ROOM_VERSION"

    // Glide for Geos satellite gif
    implementation "com.github.bumptech.glide:glide:$GLIDE"
    kapt "com.github.bumptech.glide:compiler:$GLIDE"

    // For display of SUA GeoJSON and special markers on map
    implementation "com.google.maps.android:android-maps-utils:$ANDROID_MAPS_UTILS"

    // WorkManager - background download/import of airport database
    implementation "androidx.work:work-runtime:$WORK_VERSION"

    //Check/request/get permission for access to Downloads directory for custom turnpoint import
    implementation "pub.devrel:easypermissions:$EASYPERMISSIONS"

    // Need for getting current location for new turnpoint but need convert to androidx.
    implementation "com.google.android.libraries.places:places:$GOOGLE_PLACES"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$ARCH_LIFE_CYCLE_VERSION"
    kapt "androidx.lifecycle:lifecycle-compiler:$ARCH_LIFE_CYCLE_VERSION"

    // Timber for logging
    implementation "com.jakewharton.timber:timber:$TIMBER"

    // JVM Unit Testing---------------------------------------------------------------------
    testImplementation "junit:junit:$JUNIT"
    testImplementation "org.mockito:mockito-core:$MOCKITO"
    testImplementation "org.powermock:powermock-api-mockito:1.7.0RC2"
    testImplementation "org.powermock:powermock-module-junit4:1.7.0RC2"
    testImplementation "org.powermock:powermock-api-mockito2:1.7.0RC2"

    testImplementation "androidx.room:room-testing:$ROOM_VERSION"

    //Android testing---------------------------------------------------------------------------
    androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0') {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'javax.inject'
    }
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.1.0') {
        // Necessary to avoid version conflicts
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation('androidx.test.espresso:espresso-contrib:3.1.0') {
        // Necessary to avoid version conflicts
        exclude group: 'com.android.support', module: 'appcompat'
        exclude group: 'com.android.support', module: 'support-v4'
        exclude group: 'com.android.support', module: 'support-v7'
        exclude group: 'com.android.support', module: 'design'
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude module: 'recyclerview-v7'
    }
    androidTestImplementation "androidx.annotation:annotation:$ANDROIDX_ANNOTATION_VERSION"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.2.0'

    // Test helpers for Room
    androidTestImplementation "androidx.room:room-testing:$ROOM_VERSION"
    androidTestImplementation "android.arch.core:core-testing:$ARCH_CORE_TESTING"

    // Matchers
    androidTestImplementation "org.hamcrest:hamcrest-library:$HAMCREST"

    // WorkManager - Test helpers
    androidTestImplementation "androidx.work:work-testing:$WORK_VERSION"

    //UI testing with UI Automator
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
}
